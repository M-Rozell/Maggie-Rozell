{"version":3,"file":"static/js/730.d6b3637b.chunk.js","mappings":"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","sources":["components/taskComponents/TaskForm.jsx","components/taskComponents/Tasks.jsx","components/taskComponents/TaskList.jsx","components/TaskModal.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect, useRef } from 'react'; \r\n\r\n\r\nfunction TaskForm(props) {\r\n\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    });\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        })\r\n        setInput('');\r\n    };\r\n\r\n    return (\r\n        \r\n        <form className='taskForm' onSubmit={handleSubmit}>\r\n            {props.edit ? (<>\r\n                <input\r\n                    type='text'\r\n                    placeholder='Update Task'\r\n                    value={input}\r\n                    name='text'\r\n                    className='taskInputUpdate'\r\n                    onChange={handleChange}\r\n                    ref={inputRef}\r\n                />\r\n                {/* <button className='taskButtonUpdate'>New</button>   */}\r\n            </>) :\r\n                (<>\r\n\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Task'\r\n                        value={input}\r\n                        name='text'\r\n                        className='taskInput'\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                    {/* <button className='taskButton'>Add</button>   */}\r\n                </>)\r\n            }\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default TaskForm;\r\n\r\n\r\n\r\n","\r\nimport TaskForm from './TaskForm';\r\nimport React, { useState } from 'react';\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { MdModeEditOutline } from 'react-icons/md';\r\n\r\n\r\nfunction Tasks({ tasks, completeTask, removeTask, updateTask }) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTask(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    };\r\n\r\n    if (edit.id) {\r\n        return <TaskForm edit={edit} onSubmit={submitUpdate} />\r\n    };\r\n\r\n    \r\n    return tasks.map((task, index) => (\r\n\r\n        <div className={task.isComplete ? 'taskRow complete' : 'taskRow'}\r\n            key={index}>\r\n\r\n            <div key={task.id} onClick={() => completeTask(task.id)}>\r\n                {task.text}\r\n            </div>\r\n\r\n            <div className='icons'>\r\n                <MdModeEditOutline\r\n                    onClick={() => setEdit({ id: task.id, value: task.text })}\r\n                    className='editIcon' />\r\n                <AiOutlineClose\r\n                    onClick={() => removeTask(task.id)}\r\n                    className='removeIcon' />\r\n            </div>\r\n        </div>\r\n    ))\r\n};\r\n\r\nexport default Tasks;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport Tasks from './Tasks';\r\nimport TaskForm from './TaskForm';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst LOCAL_STORAGE_KEY = 'taskApp.tasks';\r\n\r\nfunction TaskList() {\r\n\r\n  const [tasks, setTasks] = useState(\r\n    JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || []);\r\n\r\n\r\n  //store Tasks\r\n  useEffect(() => {\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(tasks))\r\n  }, [tasks]);\r\n\r\n  const addTask = task => {\r\n    if (!task.text || /^\\s*$/.test(task.text)) {\r\n      return\r\n    }\r\n    const newTasks = [task, ...tasks]\r\n    setTasks(newTasks);\r\n    console.log(newTasks);\r\n  };\r\n\r\n  const updateTask = (taskId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return\r\n    }\r\n    setTasks(prev => prev.map(item => (item.id === taskId ? newValue : item)));\r\n  };\r\n\r\n  const removeTask = id => {\r\n    const removeArr = [...tasks].filter(task => task.id !== id)\r\n    setTasks(removeArr)\r\n  };\r\n\r\n  const completeTask = id => {\r\n    let updatedTasks = tasks.map(task => {\r\n      if (task.id === id) {\r\n        task.isComplete = !task.isComplete\r\n      }\r\n      return task\r\n    })\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div>\r\n      <h1 className='taskCompiler'>Task Compiler</h1>\r\n      <hr className='horizontalLine' />\r\n\r\n      <TaskForm onSubmit={addTask} />\r\n\r\n      <Tasks\r\n        tasks={tasks}\r\n        completeTask={completeTask}\r\n        removeTask={removeTask}\r\n        updateTask={updateTask} />\r\n\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default TaskList;\r\n\r\n\r\n","\r\nimport React from 'react';\r\nimport \"../css/TaskModal.css\";\r\nimport { AiFillCloseCircle } from 'react-icons/ai';\r\nimport TaskList from \"../components/taskComponents/TaskList\";\r\n\r\n\r\nfunction TaskModal({ closeModal, openBtn }) {\r\n\r\n    const handleCloseTaskModal = () => {\r\n        closeModal(false)\r\n        openBtn(true)\r\n    };\r\n\r\n\r\n    return (\r\n\r\n        <div className='taskContainer'>\r\n            <div className='taskApp'>\r\n\r\n                <div className='taskCloseBtn '>\r\n                    <button onClick={() => handleCloseTaskModal()}><AiFillCloseCircle /></button>\r\n                </div>\r\n\r\n                <TaskList />\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TaskModal;"],"names":["props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","tasks","completeTask","removeTask","updateTask","setEdit","map","task","index","isComplete","onClick","LOCAL_STORAGE_KEY","JSON","parse","localStorage","getItem","setTasks","setItem","stringify","test","newTasks","console","log","updatedTasks","removeArr","filter","taskId","newValue","prev","item","closeModal","openBtn"],"sourceRoot":""}